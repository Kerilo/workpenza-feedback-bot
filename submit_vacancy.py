import logging
   from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, ReplyKeyboardRemove
   from telegram.constants import ParseMode
   from telegram.ext import (
       Application,
       CommandHandler,
       MessageHandler,
       filters,
       CallbackQueryHandler,
       ContextTypes,
       ConversationHandler
   )

   # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
   logging.basicConfig(
       level=logging.INFO,
       format='%(asctime)s - %(levelname)s - %(message)s',
       handlers=[
           logging.FileHandler('submit_vacancy.log'),  # –õ–æ–≥–∏ –≤ —Ñ–∞–π–ª
           logging.StreamHandler()  # –õ–æ–≥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
       ]
   )
   logger = logging.getLogger(__name__)

   # --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
   TELEGRAM_TOKEN = '7809529722:AAF_7DPAzVPPRYFt9wM-G8gTqN_q_ycofF4'  # –¢–≤–æ–π —Ç–æ–∫–µ–Ω
   TELEGRAM_CHANNEL_ID = '@rabota_pnz58'  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π ID –∫–∞–Ω–∞–ª–∞
   ADMIN_TELEGRAM_ID = '246591923'  # –¢–≤–æ–π Telegram ID

   # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
   SUBMIT = 0

   # --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ü–æ–¥–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é" ---
   submit_keyboard = ReplyKeyboardMarkup(
       [['–ü–æ–¥–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é']],
       resize_keyboard=True,
       one_time_keyboard=False
   )

   # --- –§—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞ ---
   async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
       await update.message.reply_text(
           "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–¥–∞—á–∏ –≤–∞–∫–∞–Ω—Å–∏–π –≤ –∫–∞–Ω–∞–ª @rabota_pnz58.\n"
           "üìå –ß—Ç–æ–±—ã –ø–æ–¥–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ü–æ–¥–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é' –Ω–∏–∂–µ üëá\n"
           "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—Å—ã–≤–∞–π—Ç–µ —Ä–∞–±–æ—Ç—É –ø–æ–¥—Ä–æ–±–Ω–æ, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ –ø–æ–Ω–∏–º–∞–ª–∏ –∑–∞–¥–∞—á—É!",
           reply_markup=submit_keyboard
       )
       return ConversationHandler.END

   async def submit(update: Update, context: ContextTypes.DEFAULT_TYPE):
       await update.message.reply_text(
           "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É –≤–∞–∫–∞–Ω—Å–∏—é –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º. –í–æ—Ç –ø—Ä–∏–º–µ—Ä, –∫–∞–∫ –æ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≥–ª—è–¥–µ—Ç—å:\n\n"
           "–ò—â—É –≥—Ä—É–∑—á–∏–∫–æ–≤ –¥–ª—è –ø–µ—Ä–µ–µ–∑–¥–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã.\n"
           "üíº –û–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã: –ù—É–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –º–µ–±–µ–ª—å (–¥–∏–≤–∞–Ω, —à–∫–∞—Ñ, —Å—Ç–æ–ª) –∏–∑ –∫–≤–∞—Ä—Ç–∏—Ä—ã –Ω–∞ 3-–º —ç—Ç–∞–∂–µ (–ª–∏—Ñ—Ç–∞ –Ω–µ—Ç), –ø–æ–≥—Ä—É–∑–∏—Ç—å –≤ –≥—Ä—É–∑–æ–≤–∏–∫ –∏ –ø–µ—Ä–µ–≤–µ–∑—Ç–∏ –Ω–∞ –¥—Ä—É–≥–æ–π –∞–¥—Ä–µ—Å (5 –∫–º). –ü–æ—Å–ª–µ —Ä–∞–∑–≥—Ä—É–∑–∏—Ç—å –∏ –∑–∞–Ω–µ—Å—Ç–∏ –Ω–∞ 2-–π —ç—Ç–∞–∂ (–µ—Å—Ç—å –ª–∏—Ñ—Ç). –†–∞–±–æ—Ç–∞ –∑–∞–π–º—ë—Ç –æ–∫–æ–ª–æ 4 —á–∞—Å–æ–≤.\n"
           "üìç –†–∞–π–æ–Ω: –ê—Ä–±–µ–∫–æ–≤–æ, —É–ª. –õ–µ–Ω–∏–Ω–∞, 10 ‚Üí —É–ª. –ü–æ–±–µ–¥—ã, 20.\n"
           "üí∞ –û–ø–ª–∞—Ç–∞: 3000 —Ä—É–±. –∑–∞ –≤—Å—é —Ä–∞–±–æ—Ç—É (–∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç–µ —Å–≤–æ—é —Ü–µ–Ω—É –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö).\n"
           "üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: 20 –º–∞—è 2025 –≥–æ–¥–∞, —Å 9:00 –¥–æ 13:00.\n"
           "üìû –ö–æ–Ω—Ç–∞–∫—Ç: +7 (912) 345-67-89 –∏–ª–∏ @username –≤ Telegram.\n\n"
           "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã —É–∫–∞–∑–∞–ª–∏:\n"
           "- –ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã: —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å, –æ–±—ä—ë–º –∑–∞–¥–∞—á, —Å–ª–æ–∂–Ω–æ—Å—Ç—å, —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–π–º—ë—Ç.\n"
           "- –†–∞–π–æ–Ω –∏–ª–∏ –∞–¥—Ä–µ—Å —Ä–∞–±–æ—Ç—ã (–µ—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–µ—Å—Ç, —É–∫–∞–∂–∏—Ç–µ –≤—Å–µ).\n"
           "- –°—É–º–º—É –æ–ø–ª–∞—Ç—ã (–∏–ª–∏ –∑–∞–ø—Ä–æ—Å–∏—Ç–µ —Ä–∞—Å—Ü–µ–Ω–∫–∏ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö).\n"
           "- –î–∞—Ç—É –∏ –≤—Ä–µ–º—è (–∏–ª–∏ –ø–µ—Ä–∏–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã).\n"
           "- –•–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏ (—Ç–µ–ª–µ—Ñ–æ–Ω, Telegram, –í–ö–æ–Ω—Ç–∞–∫—Ç–µ –∏ —Ç.–¥.).\n\n"
           "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à—É –≤–∞–∫–∞–Ω—Å–∏—é –Ω–∏–∂–µ:",
           reply_markup=ReplyKeyboardRemove()
       )
       return SUBMIT

   async def handle_vacancy(update: Update, context: ContextTypes.DEFAULT_TYPE):
       vacancy_text = update.message.text
       user = update.message.from_user

       # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≤–∞–∫–∞–Ω—Å–∏–∏ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏
       message = (
           f"üìù –ù–æ–≤–∞—è –≤–∞–∫–∞–Ω—Å–∏—è –æ—Ç {user.first_name} (ID: {user.id})\n\n"
           f"{vacancy_text}"
       )

       # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏
       keyboard = [
           [
               InlineKeyboardButton("–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data=f"publish_{user.id}"),
               InlineKeyboardButton("–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{user.id}")
           ]
       ]
       reply_markup = InlineKeyboardMarkup(keyboard)

       # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
       try:
           await context.bot.send_message(
               chat_id=ADMIN_TELEGRAM_ID,
               text=message,
               reply_markup=reply_markup,
               parse_mode=ParseMode.HTML
           )
       except Exception as e:
           logger.error(f"Failed to send vacancy for moderation: {e}")
           await update.message.reply_text(
               "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
               reply_markup=submit_keyboard
           )
           return ConversationHandler.END

       # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
       await update.message.reply_text(
           "–í–∞—à–∞ –≤–∞–∫–∞–Ω—Å–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é. –û–∂–∏–¥–∞–π—Ç–µ!",
           reply_markup=submit_keyboard
       )
       return ConversationHandler.END

   async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
       query = update.callback_query
       await query.answer()

       action, user_id = query.data.split("_")
       user_id = int(user_id)

       # –¢–µ–∫—Å—Ç –≤–∞–∫–∞–Ω—Å–∏–∏ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
       vacancy_text = query.message.text.replace(f"üìù –ù–æ–≤–∞—è –≤–∞–∫–∞–Ω—Å–∏—è –æ—Ç {query.message.chat.first_name} (ID: {user_id})\n\n", "")
       message = (
           f"{vacancy_text}\n\n"
           f'–ò—Å—Ç–æ—á–Ω–∏–∫: <a href="https://t.me/PenzaVacancyBot">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Telegram</a>\n\n'
           f'üîó <b><a href="https://t.me/rabota_pnz58">–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è</a></b> | üì© <b><a href="https://t.me/PenzaVacancyBot">–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é</a></b>'
       )

       if action == "publish":
           # –ü—É–±–ª–∏–∫—É–µ–º –≤ –∫–∞–Ω–∞–ª
           try:
               await context.bot.send_message(
                   chat_id=TELEGRAM_CHANNEL_ID,
                   text=message,
                   parse_mode=ParseMode.HTML,
                   disable_web_page_preview=True
               )
               # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
               await context.bot.send_message(
                   chat_id=user_id,
                   text="–í–∞—à–∞ –≤–∞–∫–∞–Ω—Å–∏—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ –∫–∞–Ω–∞–ª–µ!"
               )
               await query.edit_message_text(
                   text=message + "\n\n‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª–µ",
                   parse_mode=ParseMode.HTML
               )
           except Exception as e:
               logger.error(f"Failed to publish vacancy: {e}")
               await query.edit_message_text(
                   text=message + "\n\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏",
                   parse_mode=ParseMode.HTML
               )
       else:
           # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏
           try:
               await context.bot.send_message(
                   chat_id=user_id,
                   text="–í–∞—à–∞ –≤–∞–∫–∞–Ω—Å–∏—è –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º."
               )
               await query.edit_message_text(
                   text=message + "\n\n‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ",
                   parse_mode=ParseMode.HTML
               )
           except Exception as e:
               logger.error(f"Failed to notify user of rejection: {e}")
               await query.edit_message_text(
                   text=message + "\n\n‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ (–æ—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è)",
                   parse_mode=ParseMode.HTML
               )

   async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
       await update.message.reply_text(
           "–ü–æ–¥–∞—á–∞ –≤–∞–∫–∞–Ω—Å–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
           reply_markup=submit_keyboard
       )
       return ConversationHandler.END

   def main():
       app = Application.builder().token(TELEGRAM_TOKEN).build()

       # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ConversationHandler
       conv_handler = ConversationHandler(
           entry_points=[
               CommandHandler('submit', submit),
               MessageHandler(filters.Text(['–ü–æ–¥–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é']), submit)
           ],
           states={
               SUBMIT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_vacancy)]
           },
           fallbacks=[CommandHandler('cancel', cancel)]
       )

       app.add_handler(conv_handler)
       app.add_handler(CallbackQueryHandler(button))
       app.add_handler(CommandHandler('start', start))

       logger.info("Vacancy bot started")
       app.run_polling(stop_signals=None)

   if __name__ == '__main__':
       main()